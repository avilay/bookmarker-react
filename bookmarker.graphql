scalar DateTime

type ToRead {
  isImportant: Boolean
  isUrgent: Boolean
}

type Note {
  createdAt: DateTime
  contents: String
}

type Bookmark {
  id: ID!
  url: String!
  title: String
  toRead: ToRead
  notes: [Note]
}

interface Exception {
  code: Int
  message: String
}

type BookmarkNotFound implements Exception {
  code: Int
  message: String
  badBookmarkId: ID
}

type InvalidUrl implements Exception {
  code: Int
  message: String
  badUrl: String
}

union BookmarkResponse = Bookmark | BookmarkNotFound

type Query {
  bookmarks: [Bookmark]
  bookmark(id: ID!): BookmarkResponse
}

union AddBookmarkResponse = Bookmark | InvalidUrl

type Mutation {
  addBookmark(
    url: String!,
    title: String,
    isImportant: Boolean,
    isUrgent: Boolean,
    notes: String
  ): AddBookmarkResponse
}